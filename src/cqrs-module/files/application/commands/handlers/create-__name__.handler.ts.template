import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';

import { <%= classify(name) %> } from '#modules/<%= plural(name) %>/domain/entities';
import { I<%= classify(plural(name)) %>Repository } from '#modules/<%= dasherize(plural(name))%>/domain/repositories';
import { Create<%= classify(name) %>Command } from '../impl';

@CommandHandler(Create<%= classify(name) %>Command)
export class Create<%= classify(name) %>Handler implements ICommandHandler<Create<%= classify(name) %>Command> {
  constructor(private readonly <%= camelize(plural(name)) %>Repository: I<%= classify(plural(name)) %>Repository) {}

  async execute({ create<%= classify(name) %>Dto }: Create<%= classify(name) %>Command): Promise<<%= classify(name) %>> {
    return this.<%= camelize(plural(name)) %>Repository.create(create<%= classify(name) %>Dto);
  }
}
